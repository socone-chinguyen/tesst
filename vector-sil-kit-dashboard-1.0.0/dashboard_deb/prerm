#!/bin/sh
# prerm script for sil-kit-dashboard
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <prerm> `remove'
#        * <old-prerm> `upgrade' <new-version>
#        * <new-prerm> `failed-upgrade' <old-version>
#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>
#        * <deconfigured's-prerm> `deconfigure' `in-favour'
#          <package-being-installed> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package


package_type=deb

#
# Register $@ unit files with systemd service.
#
register_services ()
{
  for unit in "$@"; do
    systemctl enable --now "$unit"
  done
}


#
# Unregister $@ unit files with systemd service.
#
unregister_services ()
{
  for unit in "$@"; do
    if file_belongs_to_single_package "$unit"; then
      local unit_name=`basename "$unit"`
      if systemctl list-units --full -all | grep -q "$unit_name"; then
        systemctl disable --now "$unit_name"
      fi
    fi
  done
}

file_belongs_to_single_package ()
{
  if [ ! -e "$1" ]; then
    false
  elif [ "$package_type" = rpm ]; then
    test `rpm -q --whatprovides "$1" | wc -l` = 1
  elif [ "$package_type" = deb ]; then
    test `dpkg -S "$1" | wc -l` = 1
  else
    exit 1
  fi
}

case "$1" in
    remove|upgrade|deconfigure)

unregister_services '/lib/systemd/system/vector-sil-kit-dashboard.service'
    ;;

    failed-upgrade)
    ;;

    *)
        echo "prerm called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

exit 0
